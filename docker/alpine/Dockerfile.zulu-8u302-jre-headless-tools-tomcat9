
# This Zulu OpenJDK Dockerfile and corresponding Docker image are
# to be used solely with Java applications or Java application components
# that are being developed for deployment on Microsoft Azure or Azure Stack,
# and are not intended to be used for any other purpose.

FROM mcr.microsoft.com/java/jdk:8u302-zulu-alpine AS stage1
FROM mcr.microsoft.com/java/jre-headless:8u302-zulu-alpine
MAINTAINER Zulu Enterprise Container Images <azul-zulu-images@microsoft.com>

ARG JDK_DIR=/usr/lib/jvm/zulu-8-azure-jdk_8.56.0.21-8.0.302-linux_musl_x64
ARG JRE_DIR=/usr/lib/jvm/zulu-8-azure-jre-headless_8.56.0.21-8.0.302-linux_musl_x64

ARG TOMCAT_MAJOR=9
ARG TOMCAT_VERSION=9.0.50
ARG SERVER_XML=server.xml
ARG LOGGING_PROPERTIES=logging.properties
ARG CATALINA_PROPERTIES=catalina.properties

COPY --from=stage1 ${JDK_DIR}/bin/jcmd ${JRE_DIR}/bin
COPY --from=stage1 ${JDK_DIR}/bin/jmap ${JRE_DIR}/bin
COPY --from=stage1 ${JDK_DIR}/bin/jstack ${JRE_DIR}/bin
COPY --from=stage1 ${JDK_DIR}/lib/tools.jar ${JRE_DIR}/lib
COPY --from=stage1 ${JDK_DIR}/jre/lib/amd64/libattach.so ${JRE_DIR}/lib/amd64
RUN cd /usr/bin && find ${JRE_DIR}/bin -type f -perm -a=x -exec ln -f -s {} . \;

# As provided here, only the access log gets written to this location.
# Mount to a persistent volume to preserve access logs.
# Modify this value to specify a different log directory.
# e.g. /home/logs in Azure App Service
ENV LOG_ROOT=/tomcat_logs

ENV PATH /usr/local/tomcat/bin:$PATH

# Make Java 8 obey container resource limits, improve performance
ENV JAVA_OPTS "-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:+UseG1GC -Djava.awt.headless=true"

# Cleanup & Install
RUN apk add --update openssh-server bash openrc && \
    apk update && \
    apk upgrade && \
    rm -rf /var/cache/apk/* && \
    # Remove unnecessary services
    rm -f /etc/init.d/hwdrivers \
          /etc/init.d/hwclock \
          /etc/init.d/mtab \
          /etc/init.d/bootmisc \
          /etc/init.d/modules \
          /etc/init.d/modules-load \
          /etc/init.d/modloop && \
    # Install Tomcat
    wget -O /tmp/apache-tomcat-${TOMCAT_VERSION}.tar.gz https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v${TOMCAT_VERSION}/bin/apache-tomcat-${TOMCAT_VERSION}.tar.gz --no-verbose && \
    mkdir /usr/local/tomcat && \
    tar zxf /tmp/apache-tomcat-${TOMCAT_VERSION}.tar.gz -C /usr/local/tomcat --strip-components 1 && \
    rm -f /tmp/apache-tomcat-${TOMCAT_VERSION}.tar.gz

COPY Tomcat/v9/${SERVER_XML} /usr/local/tomcat/conf/server.xml
COPY Tomcat/v9/${LOGGING_PROPERTIES} /usr/local/tomcat/conf/logging.properties
COPY Tomcat/v9/${CATALINA_PROPERTIES} /usr/local/tomcat/conf/catalina.properties

# Copy the startup script
COPY Tomcat/v9/startup.sh /startup.sh
RUN chmod a+x /startup.sh

EXPOSE 80

ENTRYPOINT ["/startup.sh"]
